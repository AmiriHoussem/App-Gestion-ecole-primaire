/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfaces.Classe;

import Plus.Conversion;
import Plus.TextAreaRenderer;
import Entitées.Classe;
import Entitées.Eleve;
import Entitées.Salle;
import Entitées.Seance;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;

/**
 *
 * @author Almia
 */
public class InterfacePrincipaleClasse extends javax.swing.JPanel {

    /**
     * Creates new form InterfacePrincipaleClasse
     */
    public final static void updateTableCl(){
        Classe[] tabe=new Classe[1000];
        tabe=Classe.AfficherClasses();
        if(tabe!=null){
             int i=0;
             Object[][]o=new Object[tabe.length][3];
             while (i<tabe.length){
             o[i][0]=tabe[i].getId();
             o[i][1]=tabe[i].getNiveau();
             o[i][2]=tabe[i].getNom();
             i++;
             
             }
            DefaultTableModel model = new DefaultTableModel(o,new Object[] {"ID", "NIVEAU" ,"NOM"}  );
            jTableCLASSE.setModel(model);   }
        else {DefaultTableModel m=(DefaultTableModel) jTableCLASSE.getModel();
            m.setRowCount(0);
            jTableCLASSE.setModel(m);  
            
        }
    }
    
    public InterfacePrincipaleClasse() {
        initComponents();
        updateTableCl();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jTextFieldRECHERCHE = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableCLASSE = new javax.swing.JTable();
        jButtonREFRESH = new javax.swing.JButton();
        jButtonAJOUTER = new javax.swing.JButton();
        jButtonMODIFIER = new javax.swing.JButton();
        jButtonSUPPRIMER = new javax.swing.JButton();
        jButtonCONSULTER = new javax.swing.JButton();
        jButtonEmplois = new javax.swing.JButton();

        jLabel1.setText("Recherche par:");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Id", "Niveau", "Nom" }));

        jTextFieldRECHERCHE.setText("rechercher");
        jTextFieldRECHERCHE.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextFieldRECHERCHEMouseClicked(evt);
            }
        });

        jButton1.setText("Rechercher");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTableCLASSE.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "NIVEAU", "NOM"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableCLASSE.setMaximumSize(new java.awt.Dimension(32767, 32767));
        jTableCLASSE.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTableCLASSE);
        if (jTableCLASSE.getColumnModel().getColumnCount() > 0) {
            jTableCLASSE.getColumnModel().getColumn(0).setResizable(false);
            jTableCLASSE.getColumnModel().getColumn(1).setResizable(false);
            jTableCLASSE.getColumnModel().getColumn(2).setResizable(false);
        }

        jButtonREFRESH.setText("Refresh");
        jButtonREFRESH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonREFRESHActionPerformed(evt);
            }
        });

        jButtonAJOUTER.setText("Ajouter");
        jButtonAJOUTER.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAJOUTERActionPerformed(evt);
            }
        });

        jButtonMODIFIER.setText("Modifier");
        jButtonMODIFIER.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMODIFIERActionPerformed(evt);
            }
        });

        jButtonSUPPRIMER.setText("Supprimer");
        jButtonSUPPRIMER.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSUPPRIMERActionPerformed(evt);
            }
        });

        jButtonCONSULTER.setText("Consulter");
        jButtonCONSULTER.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCONSULTERActionPerformed(evt);
            }
        });

        jButtonEmplois.setText("Emplois");
        jButtonEmplois.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEmploisActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 584, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jTextFieldRECHERCHE, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(jButton1)
                .addGap(170, 170, 170))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(129, 129, 129)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButtonREFRESH)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonAJOUTER)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonMODIFIER)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonSUPPRIMER)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonCONSULTER)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonEmplois)
                        .addGap(152, 152, 152))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 850, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(154, 154, 154))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(78, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jTextFieldRECHERCHE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAJOUTER)
                    .addComponent(jButtonMODIFIER)
                    .addComponent(jButtonSUPPRIMER)
                    .addComponent(jButtonCONSULTER)
                    .addComponent(jButtonREFRESH)
                    .addComponent(jButtonEmplois))
                .addGap(89, 89, 89))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldRECHERCHEMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextFieldRECHERCHEMouseClicked
        // TODO add your handling code here:
        jTextFieldRECHERCHE.setText("");
    }//GEN-LAST:event_jTextFieldRECHERCHEMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        Classe e=new Classe();
        Classe[] tabe=new Classe[1000];
        if(jComboBox1.getSelectedItem().toString()=="Id")
        {e=Classe.ChargerClasse(Conversion.StringtoInt(jTextFieldRECHERCHE.getText()));
            if(e.getId()!=0)
            {Object[][]o=new Object[][]{{e.getId(),e.getNiveau(),e.getNom()}};
                DefaultTableModel f=new DefaultTableModel(o, new Object[] {"ID", "NOM" ,"PRENOM"  });
                jTableCLASSE.setModel(f);}
            else JOptionPane.showMessageDialog(null, "Aucune classe avec cet id!");
        }
        else if (jComboBox1.getSelectedItem().toString()=="Nom" ){
            e=Classe.ChargerClasseParNom(jTextFieldRECHERCHE.getText().toString());
            if(e.getId()!=0)
            {Object[][]o=new Object[][]{{e.getId(),e.getNiveau(),e.getNom()}};
                DefaultTableModel f=new DefaultTableModel(o, new Object[] {"ID", "NOM" ,"PRENOM"  });
                jTableCLASSE.setModel(f);}
            else JOptionPane.showMessageDialog(null, "Aucune classe avec ce nom!");

        }
        else if(jComboBox1.getSelectedItem().toString()=="Niveau" ){
           tabe=Classe.ChargerClassesParNiveau(jTextFieldRECHERCHE.getText().toString());
            if(tabe!=null)
            {int i=0;
                Object[][]o=new Object[tabe.length][3];
                while (i<tabe.length){
                    o[i][0]=tabe[i].getId();
                    o[i][1]=tabe[i].getNiveau();
                    o[i][2]=tabe[i].getNom();
                    i++;
                }
                DefaultTableModel model = new DefaultTableModel(o,new Object[] {"ID", "NOM" ,"PRENOM"}  );
                jTableCLASSE.setModel(model);}
            else JOptionPane.showMessageDialog(null, "Aucune classe dans ce niveau!");
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButtonREFRESHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonREFRESHActionPerformed
        // TODO add your handling code here:
        updateTableCl();
    }//GEN-LAST:event_jButtonREFRESHActionPerformed

    private void jButtonAJOUTERActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAJOUTERActionPerformed
        // TODO add your handling code here:
        JFrame x=new AjouterClasse();
        x.setVisible(true);

    }//GEN-LAST:event_jButtonAJOUTERActionPerformed

    private void jButtonMODIFIERActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMODIFIERActionPerformed
        // TODO add your handling code here:
        if(jTableCLASSE.getSelectedRow()!=-1){
            int id;
            int index=jTableCLASSE.getSelectedRow();
            TableModel model = jTableCLASSE.getModel();
            String z= model.getValueAt(index, 0).toString();
            id=Integer.parseInt(z);
            ModifierClasse x=new ModifierClasse();
            Classe i=new Classe();

            i=Classe.ChargerClasse(id);
            x.getjTextFieldID().setText(Integer.toString(i.getId()));
            x.getjTextFieldNIVEAU().setText(i.getNiveau());
            x.getjTextFieldNOM().setText(i.getNom());
             
            Eleve[] tabe=new Eleve[1000];  
            tabe=Eleve.RechercherEleveParNIVEAU(x.getjTextFieldNIVEAU().getText());
            DefaultTableModel d=(DefaultTableModel)x.getjTableLISTE().getModel();
            d.setRowCount(0);
            if(tabe!=null)
            {
                for(int k=0;k<tabe.length;k++){
                    if(Eleve.ChargerClasseEleve(tabe[k].getId())==0)
                    d.addRow(new Object[] {false,tabe[k].getId(),tabe[k].getNom(),tabe[k].getPrenom()});
                    else if(Eleve.ChargerClasseEleve(tabe[k].getId())==Classe.ChargerClasse(Conversion.StringtoInt(x.getjTextFieldID().getText())).getId())
                        d.addRow(new Object[] {true,tabe[k].getId(),tabe[k].getNom(),tabe[k].getPrenom()});
                    
                }
                x.getjTableLISTE().setModel(d);            
            }
            
            else JOptionPane.showMessageDialog(null, "Aucun élève dans ce Niveau!");
            
            x.setVisible(true);

        }
        else JOptionPane.showMessageDialog(null, "Veuillez selectionner une classe!");
    }//GEN-LAST:event_jButtonMODIFIERActionPerformed

    private void jButtonSUPPRIMERActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSUPPRIMERActionPerformed
        // TODO add your handling code here:
        if(jTableCLASSE.getSelectedRow()!=-1){
            int index=jTableCLASSE.getSelectedRow();
            TableModel model = jTableCLASSE.getModel();
            String z= model.getValueAt(index, 0).toString();
            int id=Integer.parseInt(z);
            SupprimerClasse x=new SupprimerClasse();
            Classe i=new Classe();

            i=Classe.ChargerClasse(id);
            x.getjTextFieldID().setText(Integer.toString(i.getId()));
            x.getjTextFieldNIVEAU().setText(i.getNiveau());
            x.getjTextFieldNOM().setText(i.getNom());
            
            x.setVisible(true);
        }
        else JOptionPane.showMessageDialog(null, "Veuillez selectionner une classe!");
    }//GEN-LAST:event_jButtonSUPPRIMERActionPerformed

    private void jButtonCONSULTERActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCONSULTERActionPerformed
        // TODO add your handling code here:
        if(jTableCLASSE.getSelectedRow()!=-1){
            int index=jTableCLASSE.getSelectedRow();
            TableModel model = jTableCLASSE.getModel();
            String z= model.getValueAt(index, 0).toString();
            int id=Integer.parseInt(z);
            ConsulterClasse x=new ConsulterClasse();
            Classe i=new Classe();

            i=Classe.ChargerClasse(id);
            x.getjTextFieldID().setText(Integer.toString(i.getId()));
            x.getjTextFieldNIVEAU().setText(i.getNiveau());
            x.getjTextFieldNOM().setText(i.getNom());
            DefaultTableModel d=(DefaultTableModel)x.getjTableLISTE().getModel();
            d.setRowCount(0);           
                for(int j=0;j<i.getListe().length;j++){
                    d.addRow(new Object[] {i.getListe()[j].getId(),i.getListe()[j].getNom(),i.getListe()[j].getPrenom()});
                }
                x.getjTableLISTE().setModel(d);
                                              
            x.setVisible(true);

        }
        else JOptionPane.showMessageDialog(null, "Veuillez selectionner une classe!");

    }//GEN-LAST:event_jButtonCONSULTERActionPerformed

    private void jButtonEmploisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEmploisActionPerformed
        // TODO add your handling code here:
        if(jTableCLASSE.getSelectedRow()!=-1){
            int index=jTableCLASSE.getSelectedRow();
            TableModel model = jTableCLASSE.getModel();
            String z= model.getValueAt(index, 0).toString();
            int id=Integer.parseInt(z);
            Classe i=Classe.ChargerClasse(id);
            AfficherEmplois x=new AfficherEmplois();
            x.getjTableEmplois().setRowHeight(60); 
            for(int n=0;n<x.getjTableEmplois().getColumnCount();n++){
            x.getjTableEmplois().getColumnModel().getColumn(n).setCellRenderer(new TextAreaRenderer());
            for(int t=0;t<x.getjTableEmplois().getRowCount();t++)
                for(int j=0;j<x.getjTableEmplois().getColumnCount();j++)
                    x.getjTableEmplois().setValueAt("", t, j);
            }  
            Seance[] p=new Seance[50];
            p=Seance.ChargerSeancesClasse(i.getId());
            if(p!=null){
            for(int m=0;m<p.length;m++){
                String s=p[m].getEns().getInst().getNom()+" "+p[m].getEns().getInst().getPrenom()+"\n"+p[m].getEns().getMat().getNom()+"\n"+Salle.ChargerSalle(p[m].getSalle().getId()).getNom();
                TableColumn t=x.getjTableEmplois().getColumn(p[m].getPeriode());
                x.getjTableEmplois().setValueAt(s,p[m].getJour()-1,t.getModelIndex() );
            
            }}
            
            x.setVisible(true);

        }
        else JOptionPane.showMessageDialog(null, "Veuillez selectionner une classe!");
    }//GEN-LAST:event_jButtonEmploisActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonAJOUTER;
    private javax.swing.JButton jButtonCONSULTER;
    private javax.swing.JButton jButtonEmplois;
    private javax.swing.JButton jButtonMODIFIER;
    private javax.swing.JButton jButtonREFRESH;
    private javax.swing.JButton jButtonSUPPRIMER;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JTable jTableCLASSE;
    private javax.swing.JTextField jTextFieldRECHERCHE;
    // End of variables declaration//GEN-END:variables
}
